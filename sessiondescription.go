package explainer

import (
	tinyjson "github.com/CosmWasm/tinyjson"
	jlexer "github.com/CosmWasm/tinyjson/jlexer"
	jwriter "github.com/CosmWasm/tinyjson/jwriter"
)

// sessionDescription is generated by a WebRTC Agent. This is used to transport
// Offers and Answers.
type sessionDescription struct {
	Type string `json:"type"`
	SDP  string `json:"sdp"`
}

// suppress unused package warning
var (
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ tinyjson.Marshaler
)

func tinyjsonEa60cfe6DecodeGithubComPionPeerconnectionExplainer(in *jlexer.Lexer, out *sessionDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "sdp":
			out.SDP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func tinyjsonEa60cfe6EncodeGithubComPionPeerconnectionExplainer(out *jwriter.Writer, in sessionDescription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"sdp\":"
		out.RawString(prefix)
		out.String(string(in.SDP))
	}
	out.RawByte('}')
}
